Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> format
Rule 1     format -> EXPLEAD EQUAL expr
Rule 2     format -> EXPLEAD LP definitions RP EQUAL expr
Rule 3     definitions -> definition SEP definitions
Rule 4     definitions -> definition
Rule 5     definition -> VARIABLEDEF EQUAL ID
Rule 6     expr -> LP expr RP
Rule 7     expr -> expr operator2 expr
Rule 8     expr -> INTEGER
Rule 9     expr -> FLOAT
Rule 10    expr -> VARIABLEDEF
Rule 11    expr -> X
Rule 12    expr -> PI
Rule 13    operator2 -> ADD
Rule 14    operator2 -> SUB
Rule 15    operator2 -> MUL
Rule 16    operator2 -> DIV
Rule 17    expr -> function
Rule 18    function -> fSIN LP expr RP
Rule 19    function -> fCOS LP expr RP
Rule 20    function -> fEQ LP expr SEP expr RP
Rule 21    function -> fGT LP expr SEP expr RP
Rule 22    function -> fLT LP expr SEP expr RP
Rule 23    function -> fGTE LP expr SEP expr RP
Rule 24    function -> fLTE LP expr SEP expr RP
Rule 25    function -> fIOR LP expr SEP expr RP

Terminals, with rules where they appear

ADD                  : 13
DIV                  : 16
EQUAL                : 1 2 5
EXPLEAD              : 1 2
FLOAT                : 9
ID                   : 5
INTEGER              : 8
LP                   : 2 6 18 19 20 21 22 23 24 25
MUL                  : 15
PI                   : 12
RP                   : 2 6 18 19 20 21 22 23 24 25
SEP                  : 3 20 21 22 23 24 25
SUB                  : 14
VARIABLEDEF          : 5 10
X                    : 11
error                : 
fCOS                 : 19
fEQ                  : 20
fGT                  : 21
fGTE                 : 23
fIOR                 : 25
fLT                  : 22
fLTE                 : 24
fSIN                 : 18

Nonterminals, with rules where they appear

definition           : 3 4
definitions          : 2 3
expr                 : 1 2 6 7 7 18 19 20 20 21 21 22 22 23 23 24 24 25 25
format               : 0
function             : 17
operator2            : 7

Parsing method: LALR

state 0

    (0) S' -> . format
    (1) format -> . EXPLEAD EQUAL expr
    (2) format -> . EXPLEAD LP definitions RP EQUAL expr

    EXPLEAD         shift and go to state 2

    format                         shift and go to state 1

state 1

    (0) S' -> format .



state 2

    (1) format -> EXPLEAD . EQUAL expr
    (2) format -> EXPLEAD . LP definitions RP EQUAL expr

    EQUAL           shift and go to state 3
    LP              shift and go to state 4


state 3

    (1) format -> EXPLEAD EQUAL . expr
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 5
    function                       shift and go to state 12

state 4

    (2) format -> EXPLEAD LP . definitions RP EQUAL expr
    (3) definitions -> . definition SEP definitions
    (4) definitions -> . definition
    (5) definition -> . VARIABLEDEF EQUAL ID

    VARIABLEDEF     shift and go to state 23

    definitions                    shift and go to state 21
    definition                     shift and go to state 22

state 5

    (1) format -> EXPLEAD EQUAL expr .
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    $end            reduce using rule 1 (format -> EXPLEAD EQUAL expr .)
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 6

    (6) expr -> LP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 29
    function                       shift and go to state 12

state 7

    (8) expr -> INTEGER .

    ADD             reduce using rule 8 (expr -> INTEGER .)
    SUB             reduce using rule 8 (expr -> INTEGER .)
    MUL             reduce using rule 8 (expr -> INTEGER .)
    DIV             reduce using rule 8 (expr -> INTEGER .)
    $end            reduce using rule 8 (expr -> INTEGER .)
    RP              reduce using rule 8 (expr -> INTEGER .)
    SEP             reduce using rule 8 (expr -> INTEGER .)


state 8

    (9) expr -> FLOAT .

    ADD             reduce using rule 9 (expr -> FLOAT .)
    SUB             reduce using rule 9 (expr -> FLOAT .)
    MUL             reduce using rule 9 (expr -> FLOAT .)
    DIV             reduce using rule 9 (expr -> FLOAT .)
    $end            reduce using rule 9 (expr -> FLOAT .)
    RP              reduce using rule 9 (expr -> FLOAT .)
    SEP             reduce using rule 9 (expr -> FLOAT .)


state 9

    (10) expr -> VARIABLEDEF .

    ADD             reduce using rule 10 (expr -> VARIABLEDEF .)
    SUB             reduce using rule 10 (expr -> VARIABLEDEF .)
    MUL             reduce using rule 10 (expr -> VARIABLEDEF .)
    DIV             reduce using rule 10 (expr -> VARIABLEDEF .)
    $end            reduce using rule 10 (expr -> VARIABLEDEF .)
    RP              reduce using rule 10 (expr -> VARIABLEDEF .)
    SEP             reduce using rule 10 (expr -> VARIABLEDEF .)


state 10

    (11) expr -> X .

    ADD             reduce using rule 11 (expr -> X .)
    SUB             reduce using rule 11 (expr -> X .)
    MUL             reduce using rule 11 (expr -> X .)
    DIV             reduce using rule 11 (expr -> X .)
    $end            reduce using rule 11 (expr -> X .)
    RP              reduce using rule 11 (expr -> X .)
    SEP             reduce using rule 11 (expr -> X .)


state 11

    (12) expr -> PI .

    ADD             reduce using rule 12 (expr -> PI .)
    SUB             reduce using rule 12 (expr -> PI .)
    MUL             reduce using rule 12 (expr -> PI .)
    DIV             reduce using rule 12 (expr -> PI .)
    $end            reduce using rule 12 (expr -> PI .)
    RP              reduce using rule 12 (expr -> PI .)
    SEP             reduce using rule 12 (expr -> PI .)


state 12

    (17) expr -> function .

    ADD             reduce using rule 17 (expr -> function .)
    SUB             reduce using rule 17 (expr -> function .)
    MUL             reduce using rule 17 (expr -> function .)
    DIV             reduce using rule 17 (expr -> function .)
    $end            reduce using rule 17 (expr -> function .)
    RP              reduce using rule 17 (expr -> function .)
    SEP             reduce using rule 17 (expr -> function .)


state 13

    (18) function -> fSIN . LP expr RP

    LP              shift and go to state 30


state 14

    (19) function -> fCOS . LP expr RP

    LP              shift and go to state 31


state 15

    (20) function -> fEQ . LP expr SEP expr RP

    LP              shift and go to state 32


state 16

    (21) function -> fGT . LP expr SEP expr RP

    LP              shift and go to state 33


state 17

    (22) function -> fLT . LP expr SEP expr RP

    LP              shift and go to state 34


state 18

    (23) function -> fGTE . LP expr SEP expr RP

    LP              shift and go to state 35


state 19

    (24) function -> fLTE . LP expr SEP expr RP

    LP              shift and go to state 36


state 20

    (25) function -> fIOR . LP expr SEP expr RP

    LP              shift and go to state 37


state 21

    (2) format -> EXPLEAD LP definitions . RP EQUAL expr

    RP              shift and go to state 38


state 22

    (3) definitions -> definition . SEP definitions
    (4) definitions -> definition .

    SEP             shift and go to state 39
    RP              reduce using rule 4 (definitions -> definition .)


state 23

    (5) definition -> VARIABLEDEF . EQUAL ID

    EQUAL           shift and go to state 40


state 24

    (7) expr -> expr operator2 . expr
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 41
    function                       shift and go to state 12

state 25

    (13) operator2 -> ADD .

    LP              reduce using rule 13 (operator2 -> ADD .)
    INTEGER         reduce using rule 13 (operator2 -> ADD .)
    FLOAT           reduce using rule 13 (operator2 -> ADD .)
    VARIABLEDEF     reduce using rule 13 (operator2 -> ADD .)
    X               reduce using rule 13 (operator2 -> ADD .)
    PI              reduce using rule 13 (operator2 -> ADD .)
    fSIN            reduce using rule 13 (operator2 -> ADD .)
    fCOS            reduce using rule 13 (operator2 -> ADD .)
    fEQ             reduce using rule 13 (operator2 -> ADD .)
    fGT             reduce using rule 13 (operator2 -> ADD .)
    fLT             reduce using rule 13 (operator2 -> ADD .)
    fGTE            reduce using rule 13 (operator2 -> ADD .)
    fLTE            reduce using rule 13 (operator2 -> ADD .)
    fIOR            reduce using rule 13 (operator2 -> ADD .)


state 26

    (14) operator2 -> SUB .

    LP              reduce using rule 14 (operator2 -> SUB .)
    INTEGER         reduce using rule 14 (operator2 -> SUB .)
    FLOAT           reduce using rule 14 (operator2 -> SUB .)
    VARIABLEDEF     reduce using rule 14 (operator2 -> SUB .)
    X               reduce using rule 14 (operator2 -> SUB .)
    PI              reduce using rule 14 (operator2 -> SUB .)
    fSIN            reduce using rule 14 (operator2 -> SUB .)
    fCOS            reduce using rule 14 (operator2 -> SUB .)
    fEQ             reduce using rule 14 (operator2 -> SUB .)
    fGT             reduce using rule 14 (operator2 -> SUB .)
    fLT             reduce using rule 14 (operator2 -> SUB .)
    fGTE            reduce using rule 14 (operator2 -> SUB .)
    fLTE            reduce using rule 14 (operator2 -> SUB .)
    fIOR            reduce using rule 14 (operator2 -> SUB .)


state 27

    (15) operator2 -> MUL .

    LP              reduce using rule 15 (operator2 -> MUL .)
    INTEGER         reduce using rule 15 (operator2 -> MUL .)
    FLOAT           reduce using rule 15 (operator2 -> MUL .)
    VARIABLEDEF     reduce using rule 15 (operator2 -> MUL .)
    X               reduce using rule 15 (operator2 -> MUL .)
    PI              reduce using rule 15 (operator2 -> MUL .)
    fSIN            reduce using rule 15 (operator2 -> MUL .)
    fCOS            reduce using rule 15 (operator2 -> MUL .)
    fEQ             reduce using rule 15 (operator2 -> MUL .)
    fGT             reduce using rule 15 (operator2 -> MUL .)
    fLT             reduce using rule 15 (operator2 -> MUL .)
    fGTE            reduce using rule 15 (operator2 -> MUL .)
    fLTE            reduce using rule 15 (operator2 -> MUL .)
    fIOR            reduce using rule 15 (operator2 -> MUL .)


state 28

    (16) operator2 -> DIV .

    LP              reduce using rule 16 (operator2 -> DIV .)
    INTEGER         reduce using rule 16 (operator2 -> DIV .)
    FLOAT           reduce using rule 16 (operator2 -> DIV .)
    VARIABLEDEF     reduce using rule 16 (operator2 -> DIV .)
    X               reduce using rule 16 (operator2 -> DIV .)
    PI              reduce using rule 16 (operator2 -> DIV .)
    fSIN            reduce using rule 16 (operator2 -> DIV .)
    fCOS            reduce using rule 16 (operator2 -> DIV .)
    fEQ             reduce using rule 16 (operator2 -> DIV .)
    fGT             reduce using rule 16 (operator2 -> DIV .)
    fLT             reduce using rule 16 (operator2 -> DIV .)
    fGTE            reduce using rule 16 (operator2 -> DIV .)
    fLTE            reduce using rule 16 (operator2 -> DIV .)
    fIOR            reduce using rule 16 (operator2 -> DIV .)


state 29

    (6) expr -> LP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 42
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 30

    (18) function -> fSIN LP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 43
    function                       shift and go to state 12

state 31

    (19) function -> fCOS LP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 44
    function                       shift and go to state 12

state 32

    (20) function -> fEQ LP . expr SEP expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 45
    function                       shift and go to state 12

state 33

    (21) function -> fGT LP . expr SEP expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 46
    function                       shift and go to state 12

state 34

    (22) function -> fLT LP . expr SEP expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 47
    function                       shift and go to state 12

state 35

    (23) function -> fGTE LP . expr SEP expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 48
    function                       shift and go to state 12

state 36

    (24) function -> fLTE LP . expr SEP expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 49
    function                       shift and go to state 12

state 37

    (25) function -> fIOR LP . expr SEP expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 50
    function                       shift and go to state 12

state 38

    (2) format -> EXPLEAD LP definitions RP . EQUAL expr

    EQUAL           shift and go to state 51


state 39

    (3) definitions -> definition SEP . definitions
    (3) definitions -> . definition SEP definitions
    (4) definitions -> . definition
    (5) definition -> . VARIABLEDEF EQUAL ID

    VARIABLEDEF     shift and go to state 23

    definition                     shift and go to state 22
    definitions                    shift and go to state 52

state 40

    (5) definition -> VARIABLEDEF EQUAL . ID

    ID              shift and go to state 53


state 41

    (7) expr -> expr operator2 expr .
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    $end            reduce using rule 7 (expr -> expr operator2 expr .)
    RP              reduce using rule 7 (expr -> expr operator2 expr .)
    SEP             reduce using rule 7 (expr -> expr operator2 expr .)
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

  ! ADD             [ reduce using rule 7 (expr -> expr operator2 expr .) ]
  ! SUB             [ reduce using rule 7 (expr -> expr operator2 expr .) ]
  ! MUL             [ reduce using rule 7 (expr -> expr operator2 expr .) ]
  ! DIV             [ reduce using rule 7 (expr -> expr operator2 expr .) ]

    operator2                      shift and go to state 24

state 42

    (6) expr -> LP expr RP .

    ADD             reduce using rule 6 (expr -> LP expr RP .)
    SUB             reduce using rule 6 (expr -> LP expr RP .)
    MUL             reduce using rule 6 (expr -> LP expr RP .)
    DIV             reduce using rule 6 (expr -> LP expr RP .)
    $end            reduce using rule 6 (expr -> LP expr RP .)
    RP              reduce using rule 6 (expr -> LP expr RP .)
    SEP             reduce using rule 6 (expr -> LP expr RP .)


state 43

    (18) function -> fSIN LP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 54
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 44

    (19) function -> fCOS LP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 55
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 45

    (20) function -> fEQ LP expr . SEP expr RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    SEP             shift and go to state 56
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 46

    (21) function -> fGT LP expr . SEP expr RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    SEP             shift and go to state 57
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 47

    (22) function -> fLT LP expr . SEP expr RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    SEP             shift and go to state 58
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 48

    (23) function -> fGTE LP expr . SEP expr RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    SEP             shift and go to state 59
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 49

    (24) function -> fLTE LP expr . SEP expr RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    SEP             shift and go to state 60
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 50

    (25) function -> fIOR LP expr . SEP expr RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    SEP             shift and go to state 61
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 51

    (2) format -> EXPLEAD LP definitions RP EQUAL . expr
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 62
    function                       shift and go to state 12

state 52

    (3) definitions -> definition SEP definitions .

    RP              reduce using rule 3 (definitions -> definition SEP definitions .)


state 53

    (5) definition -> VARIABLEDEF EQUAL ID .

    SEP             reduce using rule 5 (definition -> VARIABLEDEF EQUAL ID .)
    RP              reduce using rule 5 (definition -> VARIABLEDEF EQUAL ID .)


state 54

    (18) function -> fSIN LP expr RP .

    ADD             reduce using rule 18 (function -> fSIN LP expr RP .)
    SUB             reduce using rule 18 (function -> fSIN LP expr RP .)
    MUL             reduce using rule 18 (function -> fSIN LP expr RP .)
    DIV             reduce using rule 18 (function -> fSIN LP expr RP .)
    $end            reduce using rule 18 (function -> fSIN LP expr RP .)
    RP              reduce using rule 18 (function -> fSIN LP expr RP .)
    SEP             reduce using rule 18 (function -> fSIN LP expr RP .)


state 55

    (19) function -> fCOS LP expr RP .

    ADD             reduce using rule 19 (function -> fCOS LP expr RP .)
    SUB             reduce using rule 19 (function -> fCOS LP expr RP .)
    MUL             reduce using rule 19 (function -> fCOS LP expr RP .)
    DIV             reduce using rule 19 (function -> fCOS LP expr RP .)
    $end            reduce using rule 19 (function -> fCOS LP expr RP .)
    RP              reduce using rule 19 (function -> fCOS LP expr RP .)
    SEP             reduce using rule 19 (function -> fCOS LP expr RP .)


state 56

    (20) function -> fEQ LP expr SEP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 63
    function                       shift and go to state 12

state 57

    (21) function -> fGT LP expr SEP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 64
    function                       shift and go to state 12

state 58

    (22) function -> fLT LP expr SEP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 65
    function                       shift and go to state 12

state 59

    (23) function -> fGTE LP expr SEP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 66
    function                       shift and go to state 12

state 60

    (24) function -> fLTE LP expr SEP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 67
    function                       shift and go to state 12

state 61

    (25) function -> fIOR LP expr SEP . expr RP
    (6) expr -> . LP expr RP
    (7) expr -> . expr operator2 expr
    (8) expr -> . INTEGER
    (9) expr -> . FLOAT
    (10) expr -> . VARIABLEDEF
    (11) expr -> . X
    (12) expr -> . PI
    (17) expr -> . function
    (18) function -> . fSIN LP expr RP
    (19) function -> . fCOS LP expr RP
    (20) function -> . fEQ LP expr SEP expr RP
    (21) function -> . fGT LP expr SEP expr RP
    (22) function -> . fLT LP expr SEP expr RP
    (23) function -> . fGTE LP expr SEP expr RP
    (24) function -> . fLTE LP expr SEP expr RP
    (25) function -> . fIOR LP expr SEP expr RP

    LP              shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    VARIABLEDEF     shift and go to state 9
    X               shift and go to state 10
    PI              shift and go to state 11
    fSIN            shift and go to state 13
    fCOS            shift and go to state 14
    fEQ             shift and go to state 15
    fGT             shift and go to state 16
    fLT             shift and go to state 17
    fGTE            shift and go to state 18
    fLTE            shift and go to state 19
    fIOR            shift and go to state 20

    expr                           shift and go to state 68
    function                       shift and go to state 12

state 62

    (2) format -> EXPLEAD LP definitions RP EQUAL expr .
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    $end            reduce using rule 2 (format -> EXPLEAD LP definitions RP EQUAL expr .)
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 63

    (20) function -> fEQ LP expr SEP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 69
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 64

    (21) function -> fGT LP expr SEP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 70
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 65

    (22) function -> fLT LP expr SEP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 71
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 66

    (23) function -> fGTE LP expr SEP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 72
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 67

    (24) function -> fLTE LP expr SEP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 73
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 68

    (25) function -> fIOR LP expr SEP expr . RP
    (7) expr -> expr . operator2 expr
    (13) operator2 -> . ADD
    (14) operator2 -> . SUB
    (15) operator2 -> . MUL
    (16) operator2 -> . DIV

    RP              shift and go to state 74
    ADD             shift and go to state 25
    SUB             shift and go to state 26
    MUL             shift and go to state 27
    DIV             shift and go to state 28

    operator2                      shift and go to state 24

state 69

    (20) function -> fEQ LP expr SEP expr RP .

    ADD             reduce using rule 20 (function -> fEQ LP expr SEP expr RP .)
    SUB             reduce using rule 20 (function -> fEQ LP expr SEP expr RP .)
    MUL             reduce using rule 20 (function -> fEQ LP expr SEP expr RP .)
    DIV             reduce using rule 20 (function -> fEQ LP expr SEP expr RP .)
    $end            reduce using rule 20 (function -> fEQ LP expr SEP expr RP .)
    RP              reduce using rule 20 (function -> fEQ LP expr SEP expr RP .)
    SEP             reduce using rule 20 (function -> fEQ LP expr SEP expr RP .)


state 70

    (21) function -> fGT LP expr SEP expr RP .

    ADD             reduce using rule 21 (function -> fGT LP expr SEP expr RP .)
    SUB             reduce using rule 21 (function -> fGT LP expr SEP expr RP .)
    MUL             reduce using rule 21 (function -> fGT LP expr SEP expr RP .)
    DIV             reduce using rule 21 (function -> fGT LP expr SEP expr RP .)
    $end            reduce using rule 21 (function -> fGT LP expr SEP expr RP .)
    RP              reduce using rule 21 (function -> fGT LP expr SEP expr RP .)
    SEP             reduce using rule 21 (function -> fGT LP expr SEP expr RP .)


state 71

    (22) function -> fLT LP expr SEP expr RP .

    ADD             reduce using rule 22 (function -> fLT LP expr SEP expr RP .)
    SUB             reduce using rule 22 (function -> fLT LP expr SEP expr RP .)
    MUL             reduce using rule 22 (function -> fLT LP expr SEP expr RP .)
    DIV             reduce using rule 22 (function -> fLT LP expr SEP expr RP .)
    $end            reduce using rule 22 (function -> fLT LP expr SEP expr RP .)
    RP              reduce using rule 22 (function -> fLT LP expr SEP expr RP .)
    SEP             reduce using rule 22 (function -> fLT LP expr SEP expr RP .)


state 72

    (23) function -> fGTE LP expr SEP expr RP .

    ADD             reduce using rule 23 (function -> fGTE LP expr SEP expr RP .)
    SUB             reduce using rule 23 (function -> fGTE LP expr SEP expr RP .)
    MUL             reduce using rule 23 (function -> fGTE LP expr SEP expr RP .)
    DIV             reduce using rule 23 (function -> fGTE LP expr SEP expr RP .)
    $end            reduce using rule 23 (function -> fGTE LP expr SEP expr RP .)
    RP              reduce using rule 23 (function -> fGTE LP expr SEP expr RP .)
    SEP             reduce using rule 23 (function -> fGTE LP expr SEP expr RP .)


state 73

    (24) function -> fLTE LP expr SEP expr RP .

    ADD             reduce using rule 24 (function -> fLTE LP expr SEP expr RP .)
    SUB             reduce using rule 24 (function -> fLTE LP expr SEP expr RP .)
    MUL             reduce using rule 24 (function -> fLTE LP expr SEP expr RP .)
    DIV             reduce using rule 24 (function -> fLTE LP expr SEP expr RP .)
    $end            reduce using rule 24 (function -> fLTE LP expr SEP expr RP .)
    RP              reduce using rule 24 (function -> fLTE LP expr SEP expr RP .)
    SEP             reduce using rule 24 (function -> fLTE LP expr SEP expr RP .)


state 74

    (25) function -> fIOR LP expr SEP expr RP .

    ADD             reduce using rule 25 (function -> fIOR LP expr SEP expr RP .)
    SUB             reduce using rule 25 (function -> fIOR LP expr SEP expr RP .)
    MUL             reduce using rule 25 (function -> fIOR LP expr SEP expr RP .)
    DIV             reduce using rule 25 (function -> fIOR LP expr SEP expr RP .)
    $end            reduce using rule 25 (function -> fIOR LP expr SEP expr RP .)
    RP              reduce using rule 25 (function -> fIOR LP expr SEP expr RP .)
    SEP             reduce using rule 25 (function -> fIOR LP expr SEP expr RP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 41 resolved as shift
WARNING: shift/reduce conflict for SUB in state 41 resolved as shift
WARNING: shift/reduce conflict for MUL in state 41 resolved as shift
WARNING: shift/reduce conflict for DIV in state 41 resolved as shift

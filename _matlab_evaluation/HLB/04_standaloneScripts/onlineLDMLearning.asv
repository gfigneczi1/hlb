close all;
clear;

pathData = "C:\git\KDP_Igneczi\publikációk\MOST_2024\parametersAllDrivers.mat";
load(pathData);

set(0,'defaulttextInterpreter','latex') ;

config.PARAMETER_CLUSTERING = true;
config.CONV_ANALYSIS = false;
config.VIDEO_GENERATION = false;
config.REGRESSION_PLOTS = false;
config.GENERATE_EST_PLOTS = true;
config.USE_SYNTHETIC_DATA = false;

if (config.PARAMETER_CLUSTERING)
    for i=1:length(parameters_out)
        thd = 0.1;
        U = parameters_out(i).U';
        dY = parameters_out(i).dY';

        straightLineIndeces = mean(abs(U')) <= thd;
        p0 = mean(mean(U(straightLineIndeces,:)));
        
        dY = dY-p0;
    
        leftCurveIndeces = mean(U') >= thd;
        rightCurveIndeces = mean(U') <= -thd;
        U_left = U(leftCurveIndeces,:);
        dY_left = dY(leftCurveIndeces,:);
        U_right = U(rightCurveIndeces,:);
        dY_right = dY(rightCurveIndeces,:);
        
        P_LDM_left = inv(U_left'*U_left)*U_left'*dY_left(:,:);
        P_LDM_right = inv(U_right'*U_right)*U_right'*dY_right(:,:);

        P_LDM = [reshape(P_LDM_left,9,1); reshape(P_LDM_right,9,1); p0];
        P(i,:) = P_LDM';
    end

    idx = kmeans(P,3);
    uniqueIDs = unique(idx);
    for i=1:length(uniqueIDs)
        Pcentroids{i} = sum(P(idx==uniqueIDs(i),:))/numel(find(idx==uniqueIDs(i)));
    end
end

%% CONVERGENCE ANALYSIS
if (config.CONV_ANALYSIS)
thd = 0.1;
convThd= 0.1;
for i=1:length(parameters_out)
    U = parameters_out(i).U';
    dY = parameters_out(i).dY';

    straightLineIndeces = mean(abs(U')) <= thd;
    p0 = mean(mean(U(straightLineIndeces,:)));
    
    dY = dY-p0;

    leftCurveIndeces = mean(U') >= thd;
    rightCurveIndeces = mean(U') <= -thd;
    U_left = U(leftCurveIndeces,:);
    dY_left = dY(leftCurveIndeces,:);
    U_right = U(rightCurveIndeces,:);
    dY_right = dY(rightCurveIndeces,:);

    [U_left, dY_left] = dataRestructure (U_left, dY_left, "descend");
    [U_right, dY_right] = dataRestructure (U_right, dY_right, "ascend");
    
    P_LDM_left = inv(U_left'*U_left)*U_left'*dY_left(:,:);
    P_LDM_right = inv(U_right'*U_right)*U_right'*dY_right(:,:);

    f = figure('Position', [100,100, 1200, 300]);
    
    for j=1:max(size(U_left,1), size(U_right,1))
        leftIdx = min(j,size(U_left,1));
        rightIdx = min(j,size(U_right,1));
        P_MA_left = inv(U_left(1:leftIdx,:)'*U_left(1:leftIdx,:))*U_left(1:leftIdx,:)'*dY_left(1:leftIdx,:);
        eL2_MA_LDM(i).epsLeft(j) = sqrt(1/9*sum(sum((P_MA_left-P_LDM_left).^2))) / (max(max(P_LDM_left))-min(min(P_LDM_left)));
        subplot(1,3,2);
        hold off;
        plot(U_left(:,1), dY_left(:,1), 'marker', 'o', 'LineStyle','none', 'color', [224 224 224]/255, 'HandleVisibility','off');
        hold on;
        plot(U_right(:,1), dY_right(:,1), 'marker', 'o', 'LineStyle','none', 'color', [224 224 224]/255, 'HandleVisibility','off');

        plot(U_left(1:leftIdx,1), U_left(1:leftIdx,:)*P_LDM_left, 'marker', 'o', 'LineStyle','none', 'color', [96 96 96]/255, 'HandleVisibility','off');
        plot(U_left(1:leftIdx,1), U_left(1:leftIdx,:)*P_MA_left, 'marker', 'x', 'LineStyle','none', 'color', [102 102 255]/255, 'HandleVisibility','off');
        grid on;
        xlim([-3,3]); ylim([-1,1]);

        subplot(1,3,3);
        hold off; 
        plot(eL2_MA_LDM(i).epsLeft(1:j), 'bo');
        hold on;
        plot(movmean(eL2_MA_LDM(i).epsLeft(1:j), 50), 'color', [102 178 255]/255, 'LineWidth',2);
        yline(0.1, 'HandleVisibility','off', 'LineWidth',1.5, 'LineStyle','--', 'Label', "$conv_{thd}$");
        ylim([0,2]); grid on;
        xlabel('Cycle number(-)', 'FontSize', 12);
        ylabel('NRMS', 'FontSize', 12);
        
        title('\textbf{NRMS - estimation error, $P_{left}$}', 'Interpreter','latex', 'FontSize', 12);
        legend('NRMS', 'NRMS - Moving averaged(50)', 'FontSize', 10);
        yline(1, 'HandleVisibility','off', 'color', [75, 75, 75]/255,'LineWidth',2);

        subplot(1,3,2);
        if (j==1)
            P_MA_right = inv(U_right(1:rightIdx,:)'*U_right(1:rightIdx,:))*U_right(1:rightIdx,:)'*dY_right(1:rightIdx,:);
            eL2_MA_LDM(i).epsRight(j) = sqrt(1/9*sum(sum((P_MA_right-P_LDM_right).^2))) / (max(max(P_LDM_right))-min(min(P_LDM_right)));
            hold on;
            plot(U_right(1:rightIdx,1), U_right(1:rightIdx,:)*P_LDM_right, 'marker', 'o', 'LineStyle','none', 'color', [96 96 96]/255, 'DisplayName', 'End parameter');
            plot(U_right(1:rightIdx,1), U_right(1:rightIdx,:)*P_MA_right, 'marker', 'x', 'LineStyle','none', 'color', [102 102 255]/255, 'DisplayName', 'Moving Parameter');
        else
            P_MA_right = inv(U_right(1:rightIdx,:)'*U_right(1:rightIdx,:))*U_right(1:rightIdx,:)'*dY_right(1:rightIdx,:);
            eL2_MA_LDM(i).epsRight(j) = sqrt(1/9*sum(sum((P_MA_right-P_LDM_right).^2))) / (max(max(P_LDM_right))-min(min(P_LDM_right)));
            hold on;
            plot(U_right(1:rightIdx,1), U_right(1:rightIdx,:)*P_LDM_right, 'marker', 'o', 'LineStyle','none', 'color', [96 96 96]/255, 'HandleVisibility','off');
            plot(U_right(1:rightIdx,1), U_right(1:rightIdx,:)*P_MA_right, 'marker', 'x', 'LineStyle','none', 'color', [102 102 255]/255, 'HandleVisibility','off');
        end
        title('\textbf{Correlation plot: $np_{n}$ vs. $\overline{\kappa}_{nm}$}', 'FontSize', 12);
        legend('FontSize', 10);
        xlabel('$\overline{\kappa}_{nm}$ normalized to 0.001 $\frac{1}{m}$', 'FontSize',12);
        ylabel('Node point offset $np_{n}$ (m)', 'FontSize',12);
        xline(0, 'HandleVisibility','off', 'color', [150 150 150]/255, 'LineWidth',1.5);
        yline(0, 'HandleVisibility','off', 'color', [150 150 150]/255, 'LineWidth',1.5);

        subplot(1,3,1);
        hold off; 
        plot(eL2_MA_LDM(i).epsRight(1:j), 'bo');
        hold on;
        plot(movmean(eL2_MA_LDM(i).epsRight(1:j), 50), 'color', [102 178 255]/255, 'LineWidth',2);
        ylim([0,2]); grid on;
        title('\textbf{NRMS - estimation error -} $P_{right}$', 'Interpreter','latex', 'FontSize', 12);
        xlabel('Cycle number(-)', 'FontSize', 12);
        ylabel('NRMS', 'FontSize', 12);
        legend('NRMS', 'NRMS - Moving averaged(50)', 'FontSize', 10);
        yline(1, 'HandleVisibility','off', 'color', [75, 75, 75]/255,'LineWidth',2);

        %shg; pause(0.05);

        if (i==1 & config.VIDEO_GENERATION)
            Frames(round(j/2)+1) = getframe(gcf);
        end
    end
    if (i==1 & config.VIDEO_GENERATION)
        myVideo = VideoWriter(fullfile("C:\git\KDP_Igneczi\publikációk\MOST_2024\figures", "LDM_video.avi"));
        % open the video writer
        myVideo.FrameRate = 10;
        open(myVideo);
        % write the frames to the video
        for j=2:length(Frames)
            % convert the image to a frame
            frame = Frames(j) ;
            writeVideo(myVideo, frame);
        end
        % close the writer object
        close(myVideo);
        clear Frames;
    end

    savefig(f, fullfile("C:\git\KDP_Igneczi\publikációk\MOST_2024\figures",...
                            strcat('Convergence', 'Driver_', num2str(i), '.fig')));
    saveas(f, fullfile("C:\git\KDP_Igneczi\publikációk\MOST_2024\figures",...
                    strcat('Convergence', 'Driver_', num2str(i), '.png')));
    close(f);

    % calculate the point of convergence
    % NRMS value to be below the convThd for long enough
    convTimeThd = 350; % in samples
    epsLeftConverged = movmean(eL2_MA_LDM(i).epsLeft,50) < convThd;
    epsRightConverged = movmean(eL2_MA_LDM(i).epsRight,50) < convThd;
    j=1;
    epsLeftConvergedMasked = zeros(1,length(epsLeftConverged));
    while j<=length(epsLeftConverged) - convTimeThd
        if (all(epsLeftConverged(j:j+convTimeThd)))
            epsLeftConvergedMasked(j:j+convTimeThd) = true;
            j = j+convTimeThd+1;
        else
            j = j+1;
        end
    end
    j=1;
    epsRightConvergedMasked = zeros(1,length(epsRightConverged));
    while j<=length(epsRightConverged) - convTimeThd
        if (all(epsRightConverged(j:j+convTimeThd)))
            epsRightConvergedMasked(j:j+convTimeThd) = true;
            j = j+convTimeThd+1;
        else
            j = j+1;
        end
    end

    eL2_MA_LDM(i).NconvLeft = find(epsLeftConvergedMasked, 1);
    eL2_MA_LDM(i).NconvRight = find(epsRightConvergedMasked,1);
end

f = figure('Position', [100, 100, 750, 420]);
for i=1:length(eL2_MA_LDM)
    subplot(2,2,1);
    if (~isempty(eL2_MA_LDM(i).NconvLeft))
        plot(movmean(eL2_MA_LDM(i).epsLeft,10), 'DisplayName',num2str(parameters_out(i).drID));
        hold on;
        grid on;
        ylim([0,2]);
        title('Normalized L2 norm of $P_{left,MA}$ to $P_{left}$', 'FontSize', 14);
        xlabel('#samples','FontSize', 12); ylabel('L2 norm', 'FontSize', 12);
        subplot(2,2,3);
        plot(i, eL2_MA_LDM(i).NconvLeft, 'o');
        title('Normalized L2 norm reaching 10%', 'FontSize', 14);
        xlabel('#samples','FontSize', 12); ylabel('$N_{conv}$', 'FontSize', 12);
        grid on;
        hold on;
    end

    subplot(2,2,2);
    if (~isempty(eL2_MA_LDM(i).NconvRight))
        plot(movmean(eL2_MA_LDM(i).epsRight,10), 'DisplayName',num2str(parameters_out(i).drID));
        hold on;
        grid on;
        ylim([0,2]);
        title('Normalized L2 norm of $P_{right,MA}$ to $P_{left}$', 'FontSize', 14);
        xlabel('#samples','FontSize', 12); ylabel('L2 norm', 'FontSize', 12);
        subplot(2,2,4);
        plot(i, eL2_MA_LDM(i).NconvRight, 'o');
        title('Normalized L2 norm reaching 10%', 'FontSize', 14);
        xlabel('#samples','FontSize', 12); ylabel('$N_{conv}$', 'FontSize', 12);
        grid on;
        hold on;
    end

end
end

data = estimateParameters(4, parameters_out, config);

plotParams(data(1).data(1), "left");
clc;
fprintf("Results of right side:\n");
printResults(data(1).data(1));
fprintf("\n");
fprintf("Results of left side:\n");
printResults(data(1).data(2));

%% end of main scripts

%% START of subfunctions

function plotParams(data, token)
    f = figure('Position', [100, 100, 850, 650]);

    set(f,'defaulttextInterpreter','latex') ;
    set(f, 'defaultAxesTickLabelInterpreter','latex');  
    set(f, 'defaultLegendInterpreter','latex');
    
    for i=1:size(data.EKF.output,2)
        subplot(3,3,i);
        plot(data.EKF.output(:,i), 'color', 'r', 'DisplayName',strcat("$P_{est,EKF}^{", token, "}$"));
        xlabel('Sample number');
        grid on;
        hold on;
        originalSize = get(gca, 'Position');
        plot(data.NLMS.output(:,i), 'color', 'm', 'DisplayName',strcat("$P_{est,NLMS}^{", token, "}$"));
        set(gca, 'FontSize', 12);
        if (i==1)
            legend('Location', 'best');
            
        end
        set(gca, 'Position', originalSize);
        j = i-floor(i/3);
        k = floor(i/3)+1;

        title(strcat("$P_{", token, "}^{", num2str(k),",", num2str(j),"}$"));

        ylim([max(min(data.EKF.output(:,i)), min(data.NLMS.output(:,i))) - 0.5*abs(max(min(data.EKF.output(:,i)), min(data.NLMS.output(:,i)))), ...
            min(max(data.EKF.output(:,i)), max(data.NLMS.output(:,i))) + 0.5*abs(min(max(data.EKF.output(:,i)), max(data.NLMS.output(:,i))))]);
    end


    savefig(f, fullfile("C:\git\KDP_Igneczi\publikációk\MOST_2024\figures",...
                        'Parameter_sweep.fig'));
    saveas(f, fullfile("C:\git\KDP_Igneczi\publikációk\MOST_2024\figures",...
                            'Parameter_sweep.png'));
    close(f);

end

function printResults(data)
    fprintf("Corresponding parameters are:\n \tR=%f, \n \tQy=%f \n \tQp=%f\n", data.EKF.parameters(1), data.EKF.parameters(2), data.EKF.parameters(3));
    fprintf("Maximum log likelihood: log(L)=%f\n\n", data.EKF.maxLogLikelihood);
    fprintf("Kalman Filter has been initialized with the following values:\n");
    fprintf("\t x0 = [%f %f %f %f]\n", data.EKF.initValues.x0);
    fprintf("\t P0 = diag([%f %f %f %f]\n", diag(data.EKF.initValues.P0));
    fprintf("Final NRMS values:\n");
    fprintf("\tEKF:\t%f\n", data.EKF.terminalError);
    fprintf("\tNLMS:\t%f\n", data.NLMS.terminalError);
    fprintf("\tLMS:\t%f\n", data.LMS.terminalError);
    MA_conv = convergenceCheck(data.MA.eL2, 0.002, 50);
    fprintf("Convergence is reached:\n");
    fprintf("\tEKF: %d, relative to MA: %f\n", length(data.EKF.eL2) - find(movmean(data.EKF.eL2(end:-1:1),20)>=0.15,1), (length(data.EKF.eL2) - find(movmean(data.EKF.eL2(end:-1:1),20)>=0.15,1))/MA_conv);
    fprintf("\tLMS: %d, relative to MA: %f\n", length(data.LMS.eL2) - find(movmean(data.LMS.eL2(end:-1:1),20)>=0.15,1), (length(data.LMS.eL2) - find(movmean(data.LMS.eL2(end:-1:1),20)>=0.15,1))/MA_conv);
    fprintf("\tNLMS: %d, relative to MA: %f\n", length(data.NLMS.eL2) - find(movmean(data.NLMS.eL2(end:-1:1),20)>=0.15,1), (length(data.NLMS.eL2) - find(movmean(data.NLMS.eL2(end:-1:1),20)>=0.15,1))/MA_conv);
    fprintf("\n");
    fprintf("Run time:\n");
    fprintf("\tEKF: %f secs, relative to MA: %f\n", mean(data.EKF.dt), mean(data.EKF.dt)/mean(data.MA.dt));
    fprintf("\tLMS: %f secs, relative to MA: %f\n", mean(data.LMS.dt), mean(data.LMS.dt)/mean(data.MA.dt));
    fprintf("\tNLMS: %f secs, relative to MA: %f\n", mean(data.NLMS.dt), mean(data.NLMS.dt)/mean(data.MA.dt));
end

function [convIndex] = convergenceCheck(data, P_conv, P_minConvLength)
% convergence is calculated based on the gradient of the data
% input parameter: absolute change in value
% if convergence is reached and keeps up till the end, the convergence is
% true. If convergence is reached for only a small amount of time, it is
% considered to be non-converged.
gradients = movmean(diff(movmean(data,50)),50);
if (isempty(find(abs(gradients(end:-1:1)) <= P_conv,1)))
    convIndex = inf;
else
    convIndex = length(data) - find(abs(gradients(end:-1:1)) P_conv,1);
    if (convIndex <= P_minConvLength)
        convIndex = inf;
    end
end
end

function driverData = estimateParameters(drivers, parameters_out, config)
    %% In the followings
    % Several methods are compared to each other to estimate the parameters of
    % LDM. Estimation mainly refers to the P matrices (curve matrices)
    % estimation. First, the straight line offset parameter is calculated, then
    % the straight line offset is subtracted from the overall data to provide
    % proper inputs for curve parameter estimation.

    for driverID = 1:length(drivers)
    
    driver = drivers(driverID);
    driverData(driverID).driver = driver;
    
    % regression happens for first raw of parameters
    U = parameters_out(driver).U';
    dY = parameters_out(driver).dY';

    straightLineIndeces = mean(abs(U')) <= 2.5e-1;
    p0 = mean(mean(U(straightLineIndeces,:)));
    
    dY = dY-p0;

    driverData(driverID).p0 = p0;
    
    %% solution 1: linear regression
    thd = 0.1;
    leftCurveIndeces = mean(U') >= thd;
    rightCurveIndeces = mean(U') <= -thd;
    
    U_left = U(leftCurveIndeces,:);
    dY_left = dY(leftCurveIndeces,:);
    U_right = U(rightCurveIndeces,:);
    dY_right = dY(rightCurveIndeces,:);
    
    % restructure data
    [U_left, dY_left] = dataRestructure (U_left, dY_left, "random");
    [U_right, dY_right] = dataRestructure (U_right, dY_right, "random");

    if (config.USE_SYNTHETIC_DATA)
        % produce synthetic data out of the driver data
        [U_left, dY_left] = createSyntheticData (U_left, dY_left, "randomProportional", 0.1);
        [U_right, dY_right] = createSyntheticData (U_right, dY_right, "randomProportional", 0.1);
    end
    
    tic;
    P_LDM_left = inv(U_left'*U_left)*U_left'*dY_left(:,:);
    driverData(driverID).data(1).MA.dt = toc;
    driverData(driverID).data(2).MA.dt = driverData(driverID).data(1).MA.dt;

    P_LDM_right = inv(U_right'*U_right)*U_right'*dY_right(:,:);

    for side=1:2
        global U dY P_posterior0 P_LDM
        if (side==1)
            P_LDM = P_LDM_left;
            U = U_left;
            dY = dY_left;
            token = 'left';            
        else
            P_LDM = P_LDM_right;
            U = U_right;
            dY = dY_right;
            token = 'right';
        end
    
        %% solution 1
        % NLMS

        [xNlmsCons,fNlmsCons] = fmincon(@maxNrmsNlms, [0.5, 1], [],[],[],[],[0,0],[inf, inf], []);
        
        % initialize state
        p_pred = reshape(estimateInitialParameters(U, dY), 3,3);
        
        q = xNlmsCons(1);
        Bias = xNlmsCons(2);
        
        for i=1:size(U,1)
            hold off;
            tic;
            % prediction
            y_pred = p_pred'*U(i,:)';
            % regression matrix
            Q = diag(q);
            K = q*U(i,:)';
            % normalized regression matrix
            K = K/(U(i,:)*U(i,:)'+Bias);
            y_error = dY(i,:)'-y_pred;
        
            p_pred = p_pred + K*y_error';

            dtNlms(i) = toc;

            parameters_nlms(i,:) = reshape(p_pred,1,9);
        
            NLMS(i,:,:) = p_pred;
        
            nrms(i) = sqrt(1/9*sum(sum((p_pred-P_LDM).^2)))/(max(max(P_LDM))-min(min(P_LDM)));
        end

        % LMS
        [xLmsCons,fLmsCons] = fmincon(@maxNrmsLms, 0.5, [],[],[],[],0,inf, []);
        
        % initialize state
        p_pred = reshape(estimateInitialParameters(U, dY), 3,3);
        
        qLms = xLmsCons(1);
        
        for i=1:size(U,1)
            hold off;
            tic;
            % prediction
            y_pred = p_pred'*U(i,:)';
            % regression matrix
            K = qLms*U(i,:)';
            y_error = dY(i,:)'-y_pred;
        
            p_pred = p_pred + K*y_error';

            dtLms(i) = toc;

            parameters_lms(i,:) = reshape(p_pred,1,9);
        
            LMS(i,:,:) = p_pred;
        
            nrmsLms(i) = sqrt(1/9*sum(sum((p_pred-P_LDM).^2)))/(max(max(P_LDM))-min(min(P_LDM)));
        end
        
        %% solution 2
        % EKF estimator
        % optimization

        P_posterior0 = eye(12)*0.1;
        [xCons,fCons] = fmincon(@maxLogLikelihood, [0, 0, 0], [],[],[],[],zeros(1,3),[inf inf inf], []);
                
        sy = xCons(1);
        sp = xCons(2);
        ry = xCons(3);
        Q = [eye(3)*sy^2 zeros(3,9); zeros(9,3) eye(9)*sp^2]; 
    
        % Kalman-filter initialization
        Pinit = estimateInitialParameters(U, dY);
        R = eye(3)*ry^2; 
    
        H = zeros(3,12);
        H(:,1:3) = eye(3);
    
        x_posterior = [dY(1,:)'; Pinit];
        P_posterior = P_posterior0;
    
        x0 = x_posterior;
        
        sigma_xx = P_posterior0;
        sigma_yy = H*sigma_xx*H'+R;
    
        Yerror = dY(1,:)'-H*x_posterior;
        L = log(det(sigma_yy))+Yerror'*inv(sigma_yy)*Yerror;
    
        for i=1:size(U,1) 

            tic;
            G = [x_posterior(4:6)'; x_posterior(7:9)'; x_posterior(10:12)'; zeros(9,3)];
            F = [zeros(3,3) [U(i,:) zeros(1,6); zeros(1,3) U(i,:) zeros(1,3); zeros(1,6) U(i,:)]; [zeros(9,3) eye(9)]];
    
            [x_posterior, P_posterior] = ekf_simple(x_posterior, P_posterior, U(i,:)', F,H,dY(i,:)',R,Q);

            parameters(i,1:9) = x_posterior(4:12);
    
            sigma_xx = F*sigma_xx*F'+Q;
            sigma_yy = H*sigma_xx*H'+R;

            dtEkf(i) = toc;
    
            Yerror = dY(i,:)'-H*x_posterior;
            L = L+log(det(sigma_yy))+Yerror'*inv(sigma_yy)*Yerror;
                
            P_GT = inv(U(1:i,:)'*U(1:i,:))*U(1:i,:)'*dY(1:i,:);
    
            P_est = [x_posterior(4:6) x_posterior(7:9) x_posterior(10:12)];
    
            normP = (max(max(P_LDM))-min(min(P_LDM)));
            eL2_post_LDM(i) = (sum(sum((P_est-P_LDM).^2))/9)^0.5 / normP;
            eL2_moving_LDM(i) = (sum(sum(((P_GT-P_LDM)).^2))/9)^0.5 / normP;
        end %end of KF estimation via data

        L = 1/2*L;
    
        if (config.GENERATE_EST_PLOTS)
            f = figure('Position', [100, 100, 750, 420]);
            set(f,'defaulttextInterpreter','latex') ;
            set(f, 'defaultAxesTickLabelInterpreter','latex');  
            set(f, 'defaultLegendInterpreter','latex');
            subplot(2,1,1);                
            plot(reshape(P_LDM,9,1), 'color', 'k', 'Marker', 'x', 'DisplayName','$P_{GT}^{x,1}$', 'MarkerSize', 10);
            hold on;
            plot(reshape(P_GT,9,1), 'color', 'b', 'Marker', 'o', 'DisplayName','$P_{est,MA}^{x,1}$', 'MarkerSize', 10);
            plot(x_posterior(4:12), 'color', 'r', 'Marker', 'x', 'DisplayName','$P_{est,EKF}^{x,1}$', 'MarkerSize', 10);
            plot(reshape(NLMS(end,:,:), 9,1), 'color', 'm', 'Marker', '*', 'DisplayName','$P_{est,NLMS}^{x,1}$', 'MarkerSize', 10);
            plot(reshape(LMS(end,:,:), 9,1), 'color', 'g', 'Marker', '*', 'DisplayName','$P_{est,LMS}^{x,1}$', 'MarkerSize', 10);
            grid on;
            xticks([0,1,2,3,4,5,6,7,8,9,10]);
            xticklabels(["", strcat("$P_{",token,"}^{1,1}$"), strcat("$P_{",token,"}^{2,1}$"), strcat("$P_{",token,"}^{3,1}$"), ...
                strcat("$P_{",token,"}^{1,2}$"), strcat("$P_{",token,"}^{2,2}$"), strcat("$P_{",token,"}^{2,3}$"), ...
                strcat("$P_{",token,"}^{1,3}$"), strcat("$P_{",token,"}^{2,3}$"), strcat("$P_{",token,"}^{3,3}$"), ""]);
            xlim([0,10]);
            set(gca,'FontSize',12);
            title(strcat('\textbf{Final Parameter distribution - $P_{', token, '}$}'), 'FontSize', 14);
    
            legend('Location', 'best', 'FontSize', 12);
    
            subplot(2,1,2);
            plot(movmean(eL2_moving_LDM,20), "DisplayName", 'NRMS($\Delta P_{MA}^{GT}$)', 'color', 'b', 'LineWidth',2); hold on;
            plot(movmean(eL2_post_LDM,20), "DisplayName", 'NRMS($\Delta P_{est,EKF}^{GT}$)', 'color', 'r', 'LineWidth',2);
            plot(movmean(nrms,20), "DisplayName", 'NRMS($\Delta P_{est,NLMS}^{GT}$)', 'color', 'm', 'LineWidth',2);
            plot(movmean(nrmsLms,20), "DisplayName", 'NRMS($\Delta P_{est,LMS}^{GT}$)', 'color', 'g', 'LineWidth',2);
    
            grid on;
            title(strcat('\textbf{NRMS value of error between parameters - $P_{', token, '}$}'), 'FontSize', 14);
            xlabel('Sample number', 'FontSize', 12);
            ylabel('NRMS($\Delta P$)', 'FontSize', 12);
            legend('Location', 'best', 'FontSize', 12);
            ylim([0,2]);
            yline(1, 'LineWidth',2, 'color', [150 150 150]/255, 'HandleVisibility','off');
            yline(0.15, 'LineWidth',1, 'LineStyle', '--', 'color', 'k', 'label', "$conv_{thd}=15\%$", 'Interpreter', 'latex', 'HandleVisibility','off');
    
            set(gca,'FontSize',12);
            xlim([0, length(eL2_post_LDM)]);
    
            savefig(f, fullfile("C:\git\KDP_Igneczi\publikációk\MOST_2024\figures",...
                        strcat('Estimation_', 'Driver_', num2str(driver),'_side_', token, '.fig')));
            saveas(f, fullfile("C:\git\KDP_Igneczi\publikációk\MOST_2024\figures",...
                            strcat('Estimation_', 'Driver_', num2str(driver),'_side_', token, '.png')));
            close(f);
        end  
        driverData(driverID).data(side).EKF.maxLogLikelihood = L;
        driverData(driverID).data(side).EKF.terminalError = eL2_post_LDM(end);
        driverData(driverID).data(side).EKF.parameters = [ry, sy, sp];
        driverData(driverID).data(side).EKF.initValues.x0 = x0;
        driverData(driverID).data(side).EKF.initValues.P0 = P_posterior0;
        driverData(driverID).data(side).EKF.eL2 = eL2_post_LDM;
        driverData(driverID).data(side).EKF.Pest = x_posterior(4:12);
        driverData(driverID).data(side).NLMS.eL2 = nrms;
        driverData(driverID).data(side).MA.eL2 = eL2_moving_LDM;
        driverData(driverID).data(side).MA.Pest = P_GT;
        driverData(driverID).data(side).GT.Pest = P_LDM;
        driverData(driverID).data(side).NLMS.Pest = NLMS(end,:,:);
        driverData(driverID).data(side).NLMS.terminalError = nrms(end);
        driverData(driverID).data(side).NLMS.parameters = [q, Bias];
        driverData(driverID).data(side).LMS.Pest = LMS(end,:,:);
        driverData(driverID).data(side).LMS.terminalError = nrmsLms(end);
        driverData(driverID).data(side).LMS.parameters = qLms;
        driverData(driverID).data(side).LMS.eL2 = nrmsLms;
        driverData(driverID).data(side).EKF.output = parameters;
        driverData(driverID).data(side).EKF.dt = dtEkf;
        driverData(driverID).data(side).LMS.dt = dtLms;
        driverData(driverID).data(side).NLMS.dt = dtNlms;
        driverData(driverID).data(side).NLMS.output = parameters_nlms;

        clear eL2_moving_LDM eL2_post_LDM NLMS LMS nrms nrmsLms parameters parameters_nlms dtEkf dtLms dtNlms
    end % end of side separation
    end % end of driver loop
end

function f = maxNrmsNlms(x0)
global U dY P_LDM
    % NLMS
    % initialize state
    p_pred = reshape(estimateInitialParameters(U, dY), 3,3);
    
    q = x0(1);
    Bias = x0(2);
    L = 0;
    
    for i=1:size(U,1)
        hold off;
        % prediction
        y_pred = p_pred'*U(i,:)';
        % regression matrix
        K = q*U(i,:)';
        % normalized regression matrix
        K = K/(U(i,:)*U(i,:)'+Bias);
        y_error = dY(i,:)'-y_pred;
    
        p_pred = p_pred + K*y_error';
       
        nrms(i) = sqrt(1/9*sum(sum((p_pred-P_LDM).^2)))/(max(max(P_LDM))-min(min(P_LDM)));
    end
    % non linear function - sigmoid
    x = linspace(-10,10, length(nrms));
    sigm = 50./(1+exp(-x))+0.1;
    f = sum(sigm.*nrms);
end

function f = maxNrmsLms(x0)
global U dY P_LDM
    % LMS
    % initialize state
    p_pred = reshape(estimateInitialParameters(U, dY), 3,3);
    
    q = x0(1);
    
    for i=1:size(U,1)
        hold off;
        % prediction
        y_pred = p_pred'*U(i,:)';
        % regression matrix
        K = q*U(i,:)';
        y_error = dY(i,:)'-y_pred;
        Y_error(i,:) = y_error';
    
        p_pred = p_pred + K*y_error';
       
        nrms(i) = sqrt(1/9*sum(sum((p_pred-P_LDM).^2)))/(max(max(P_LDM))-min(min(P_LDM)));
    end
    % non linear function - sigmoid
    x = linspace(-10,10, length(nrms));
    sigm = 50./(1+exp(-x))+0.1;
    f = sum(sigm.*nrms);
end


function f = maxLogLikelihood(x0)
global U dY P_posterior0 P_LDM
    % initialize state
    sy = x0(1);
    sp = x0(2);
    ry = x0(3);
    Q = [eye(3)*sy^2 zeros(3,9); zeros(9,3) eye(9)*sp^2];

    % Kalman-filter initialization
    Pinit = estimateInitialParameters(U, dY);
    R = eye(3)*ry^2;

    H = zeros(3,12);
    H(:,1:3) = eye(3);

    x_posterior = [dY(1,:)'; Pinit];
    sigma_xx = P_posterior0;
    sigma_yy = H*sigma_xx*H'+R;
    P_posterior = P_posterior0;

    Yerror = dY(1,:)'-H*x_posterior;
    L = log(det(sigma_yy))+Yerror'*inv(sigma_yy)*Yerror;
    eL2_post_LDM = 0;
   
    for i=1:size(U,1)    
        G = [x_posterior(4:6)'; x_posterior(7:9)'; x_posterior(10:12)'; zeros(9,3)];
        F = [zeros(3,3) [U(i,:) zeros(1,6); zeros(1,3) U(i,:) zeros(1,3); zeros(1,6) U(i,:)]; [zeros(9,3) eye(9)]];

        [x_posterior, P_posterior] = ekf_simple(x_posterior, P_posterior, U(i,:)', F,H,dY(i,:)',R,Q);

        sigma_xx = F*sigma_xx*F'+Q;
        sigma_yy = H*sigma_xx*H'+R;

        Yerror = dY(i,:)'-H*x_posterior;
        L = L+log(det(sigma_yy))+Yerror'*inv(sigma_yy)*Yerror;

        P_est = [x_posterior(4:6) x_posterior(7:9) x_posterior(10:12)];
    
        normP = (max(max(P_LDM))-min(min(P_LDM)));
        eL2_post_LDM = eL2_post_LDM+(sum(sum((P_est-P_LDM).^2))/9)^0.5 / normP;
    end
    L = -1/2*L;
    f = -L; %eL2_post_LDM/size(U,1);
end

function P0 = estimateInitialParameters(U, dY)
U00 = U(1:40,:);
dY00 = dY(1:40,:);

% P0 is calculated from a subset of measured data
P0 = inv(U00'*U00)*U00'*dY00;
P0 = reshape(P0,9,1);

end

function [y, Cyy, Cxy]= UT(H, x, P, R)

N = size(x,1);
for i=1:2*N+1
    if (i==1)
        X(1:N,i) = mean(x);
    elseif (i<=N+1)
        Cxx = (N*P).^0.5;
        X(:,i) = mean(x)+Cxx(:,i-1);
    else
        Cxx = (N*P).^0.5;
        X(:,i) = mean(x)-Cxx(:,i-N-1);
    end
end

Z = H*X;
W = [zeros(size(H,1),1) ones(size(H,1),2*N)*1/(2*N)];

y = 0; Cyy = R; Cxy = 0;

for i=1:2*N+1
    y = y+W(i)*Z(:,i);
end

for i=1:2*N+1
    Cyy = Cyy + W(i)*(Z(:,i)-y)*(Z(:,i)-y)';
    Cxy = Cxy +W(i)*(X(:,i)-mean(x))*(Z(:,i)-y)';
end

end

function [U, dY] = dataRestructure (U, dY, mode)

if (mode=="ascend" || mode=="descend")
     % adding extra as the mean
    U = [U mean(U,2)];
    dataSorted = sortrows([U dY],4, mode);
    dataShuffled = zeros(size(dataSorted));
    dataShuffled(1:2:2*round(size(dataSorted,1)/2),:) = dataSorted(1:round(size(dataSorted,1)/2),:);
    dataShuffled(2:2:round(size(dataSorted,1)),:) = dataSorted(round(size(dataSorted,1)/2)+1:end,:);
elseif (mode=="random")
    shuffledIndeces = randperm(size(U,1));
    dataShuffled(:,1:3) = U(shuffledIndeces,:);
    dataShuffled(:,5:7) = dY(shuffledIndeces,:);
end

U = dataShuffled(:,1:3);
dY = dataShuffled(:,5:7);
end

function [U, dY] = createSyntheticData (U, dY, noiseMode, noiseFactor)
% this function calculates some P matrices, then produces ground truth
% data, and also adds noise per the inputs 'noiseMode' and 'noiseFactor'
P = inv(U'*U)*U'*dY(:,:);
dY = U*P;
if (noiseMode == "randomProportional")
    noise = rand(size(dY))*2-1;
    normalizedNoiseFactor = noiseFactor*abs(dY);
    dY = dY + noise.*normalizedNoiseFactor;
end

end

function [x_posterior, P_posterior] = ekf_simple(x_posterior, P_posterior, u, F,H,z,R,Q)
    % prediction
    x_prior = stateUpdate(x_posterior, u');
    P_prior = F*P_posterior*F'+Q;

    % correction
    y = outputCalculation(x_prior);
    y_error = z-y;
    K = P_prior*H'*inv(H*P_prior*H'+R);
    x_posterior = x_prior+K*y_error;
    P_posterior = (eye(12)-K*H)*P_prior;

end

function x = stateUpdate(x,u)
    P = reshape(x(4:12), 3,3);
    x(1:3) = u*P;
end

function y = outputCalculation(x)
    y = x(1:3);
end
function inputRaw = prepareDataLive(modelID, segment_m, indexes, parameters)
global historicalInputData params

switch modelID
    case "sgp"
         inputRaw = [segment_m(:, indexes.OncomingTrafficType), ...
                segment_m(:, indexes.FrontTrafficType), ...
                segment_m(:, indexes.VelocityX), ...
                segment_m(:, indexes.AccelerationX), ...
                segment_m(:, indexes.YawRate), ...
                segment_m(:, indexes.LaneCurvature), ...
                segment_m(:, indexes.c3)];
    case "phtpm"
        % use historical input data to formulate the right input for the
        % LSTM network
        inputRaw = [historicalInputData(:, indexes.thetaTP), ...
                    historicalInputData(:, indexes.thetaFP), ...
                    historicalInputData(:, indexes.VelocityX), ...
                    historicalInputData(:, indexes.AccelerationY), ...
                    historicalInputData(:, indexes.YawRate), ...
                    -historicalInputData(:, indexes.LaneOrientation), ...
                    historicalInputData(:, end)];
    case "narx"
        inputRaw = [segment_m(:, indexes.OncomingTrafficType), ...
                segment_m(:, indexes.FrontTrafficType), ...
                segment_m(:, indexes.VelocityX), ...
                segment_m(:, indexes.AccelerationX), ...
                segment_m(:, indexes.YawRate), ...
                segment_m(:, indexes.LaneCurvature), ...
                segment_m(:, indexes.c3)];
    case "lrm"
        inputRaw = [segment_m(:, indexes.OncomingTrafficType), ...
                segment_m(:, indexes.FrontTrafficType), ...
                segment_m(:, indexes.VelocityX), ...
                segment_m(:, indexes.AccelerationX), ...
                segment_m(:, indexes.YawRate), ...
                segment_m(:, indexes.LaneCurvature), ...
                segment_m(:, indexes.c3)];
    case "ldm"
        N = indexes.LDM_N - indexes.LDM_1 + 1;
        for n = 1:N
            inputRaw(1,n) = segment_m(indexes.LDM_1 + n -1);
        end
    case "eldm"
        N = indexes.LDM_N - indexes.LDM_1 + 1;
        inputRaw(1,1:2*N) = 0; % initialize with zero offset
        for n = 1:N
            if (mean(segment_m(1, indexes.LDM_1:indexes.LDM_N)) > parameters.kappa_min)
                % left curve
                inputRaw(1,1:N) = segment_m(1, indexes.LDM_1:indexes.LDM_N);
            elseif (mean(segment_m(1, indexes.LDM_1:indexes.LDM_N)) < -parameters.kappa_min)
                inputRaw(N+1:end) = segment_m(indexes.LDM_1 + n -1);
            end
        end
end

end

function GP()
% This function is the cover function to call the GP sub-function for a
% given segment. Segments is an array of struct containing the driving data
% of multiple drivers. Config is a metadata struct containing information
% about e.g., the plot folders
close all;
load('inputs.mat');
config.root = "./";

segment = segments.segments(1).segment;
name = segments.segments(1).name;
% transforming the struct to array for lower calculation time
[~, segment_m, indexes] = prepareInputForPlanner(segment);

temp_folder_path = config.root;
plots_folder_name = 'plots';
set(0,'DefaultFigureVisible','off');
%% Producing oncoming traffic continuous variable
% a new indicator is introduced, which represents two things:
% 1) the time since the last vehicle passed us
% 2) the time until the next vehicle is in sight
% this number is characterized by a number between 0 and 1. When a
% vehicle left us, with a certain gradient its psychological effect is
% downgraded. If there is a suspected vehicle in sight, it raises the
% awareness of the driver, with a certain gradient counting up.
% literature: 2-3 s of short term memory.
oncomingTraffic = segment_m(:,indexes.oncomingTraffic);
risingEdges = find(diff(oncomingTraffic)>0);
fallingEdges = find(diff(oncomingTraffic)<0);
oncomingTrafficScaled = oncomingTraffic;
N = 100;
risingSections = linspace(0,1,N)';
fallingSections = risingSections(end:-1:1);

oncomingTrafficScaledWithRisingEdges = oncomingTrafficScaled;
for i=1:length(risingEdges)
    oncomingTrafficScaledWithRisingEdges(risingEdges(i)-(N-1):risingEdges(i)) = risingSections;
end
oncomingTrafficScaledWithFallingEdges = oncomingTrafficScaled;
for i=1:length(fallingEdges)
    oncomingTrafficScaledWithFallingEdges(fallingEdges(i):fallingEdges(i)+N-1) = fallingSections;
end

oncomingTrafficScaledWithFallingEdges = oncomingTrafficScaledWithFallingEdges(1:size(oncomingTraffic,1),1);

oncomingTrafficScaled = max(oncomingTrafficScaledWithRisingEdges, oncomingTrafficScaledWithFallingEdges);

segment_m(:,end+1) = oncomingTrafficScaled;
indexes.oncomingTrafficScaled = size(segment_m,2);

%% Input  and Output matrix (row: signals, column: time steps)
type = "snippeting"; 

curveTypes = calculateCurveType(segment_m, indexes, name);
switch type
    case "snippeting"
        % Segmenting data to snippets with continuation
        j = 1;
        snippetStart = 1;
        for i=1:length(curveTypes)-1
            if (curveTypes(i) == 1 && curveTypes(i+1)~=1)
                % there was a step in the data, cut it
                snippets{j} = segment_m(snippetStart:i, :);
                j = j + 1;
            elseif (curveTypes(i) ~= 1 && curveTypes(i+1)==1)
                snippetStart = i+1;
            end
        end
    case "straights"
        snippets{1} = segment_m(curveTypes==1, :);
    case "total"
        snippets{1} = segment_m;
    case "curves"
        % Segmenting data to snippets with continuation
        j = 1;
        snippetStart = 1;
        for i=1:length(curveTypes)-1
            if (curveTypes(i) > 1 && curveTypes(i+1)<=1)
                % there was a step in the data, cut it
                snippets{j} = segment_m(snippetStart:i, :);
                j = j + 1;
            elseif (curveTypes(i) <= 1 && curveTypes(i+1)>1)
                snippetStart = i+1;
            end
        end
end

%% loop through data sections
% PARAMETERS
shiftOnOutput = 10; %shift the offset in time (positive means shift forward)
shiftOnOutputSelection = 0:1:20;
p = 0.7; %percentage of evaluation data from entire dataset

for shiftID=1:numel(shiftOnOutputSelection)
    shiftOnOutput = shiftOnOutputSelection(shiftID);
    for i=1:length(snippets)-shiftOnOutput
    
        ayRel = snippets{i}(:, indexes.accelerationY)-  snippets{i}(:,indexes.c2)*2.*snippets{i}(:,indexes.velocityX).^2;
                
        input = [snippets{i}(:, indexes.c2)*2, ...
            snippets{i}(:, indexes.oncomingTraffic), ...
            movmean(ayRel,20), ...
            -movmean(snippets{i}(:, indexes.c1),20), ...
            snippets{i}(:, indexes.velocityX).*cos(-atan(movmean(snippets{i}(:, indexes.c1),20))), ...
            snippets{i}(:, indexes.velocityX).*sin(-atan(movmean(snippets{i}(:, indexes.c1),20))), ...
            snippets{i}(:, indexes.accelerationX)];
    
        N = size(input,1);
        output = zeros(N,1);
    
        output(1:N-shiftOnOutput) = -snippets{i}(shiftOnOutput+1:end, indexes.c0); %minus offset due to coordinate system transformation (vehicle to lane vs lane to vehicle)
    
            % PLOTTING input - output plots for visual checks
            f = figure('units','normalized','outerposition',[0 0 1 1]);
            subplot(size(input,2)+1,1,1);
            plot(output, 'color', 'k');
            grid on;
            
            for j=1:size(input,2)
                %subplot(size(input,1)+1,2,2*(j+1)-1);
                subplot(size(input,2)+1,1,(j+1));
                plot(input(:,j), 'color', 'b'); grid on;
                %subplot(size(input,1)+1,2,2*(j+1));
                %plot(input(j,:), output, 'bo'); grid on;
            end
            
            
            savefig(f, fullfile(temp_folder_path, plots_folder_name,...
                                strcat('GP_inputOutputs', name(1:end-4), '_', num2str(i), '.fig')));
            saveas(f, fullfile(temp_folder_path, plots_folder_name,...
                            strcat('GP_inputOutputs_', name(1:end-4), '_', num2str(i), '.png')));
            close(f);
    
        % EVALUATION / VALIDATION DATA SELECTION
        shuffledIndeces = randperm(N);
        estimationData = shuffledIndeces(1:round(p*N));
        validationData = shuffledIndeces(round(p*N)+1:end);
        input_estimation = input(estimationData,:);
        output_estimation = output(estimationData,1);
        input_validation = input(validationData,:);
        output_validation = output(validationData,:);
    
        %% Define GP 
        meanfunc = [];       % Start with a zero mean prior
        covfunc = @covSEiso;    % Squared Exponental covariance function
        %covfunc = @covRQiso;
    
        % ID problem
        
        likfunc = @likGauss;    % Gaussian likelihood
        hyp = struct('mean', [], 'cov', [0 0], 'lik', -1); % initalize hyper-parameter structure associated with the mean, covariance an likelihood functions
        hyp_opt = minimize(hyp, @gp, -100, @infGaussLik, meanfunc, covfunc, likfunc, input_estimation, output_estimation); % Optimize the marginal likelihood
       
        % Evaluation
        [estimation, deviation] = gp(hyp_opt, @infGaussLik, meanfunc, covfunc, likfunc, input_estimation, output_estimation, input_validation); % extract the mean and covarance functions
        f = figure('units','normalized','outerposition',[0 0 1 1]);
    
        confidenceBounds = [estimation+2*sqrt(deviation); flip(estimation-2*sqrt(deviation),1)];
        confidencePoints = (1:1:numel(estimation))';
    
        fill([confidencePoints; flip(confidencePoints)], confidenceBounds, 'y', 'DisplayName', '95% confidence');
        hold on;
        plot(estimation,'LineWidth', 2, 'color', 'k', 'LineStyle','--', 'DisplayName', 'estimated by GP');    
        ylabel('offset');
        grid on;
        plot(output_validation, 'LineWidth', 2, 'LineStyle', ':', 'color', 'b', 'DisplayName','validation data');
        legend;
        
        savefig(f, fullfile(temp_folder_path, plots_folder_name,...
                            strcat('StraightSnippets_', num2str(i), name(1:end-4), '.fig')));
        saveas(f, fullfile(temp_folder_path, plots_folder_name,...
                        strcat('StraightSnippets_', num2str(i), name(1:end-4), '.png')));
        close(f);
    
        %% KPI-s
        % RMS calculation
        RMS = sqrt(sum((estimation-output_validation).^2)/size(estimation,1));
        % NRMS - normalization on scale
        W = max(output_validation) - min(output_validation);
        NRMS_W = RMS/W;
        % NRMS - normalization on absolute maximum
        M = max(abs(output_validation));
        NRMS_M = RMS/M;
        fprintf("EVALUTATION of snippet %d:\n", i);
        fprintf("RMS value is: %f\n", RMS);
        fprintf("NRMS value based on range: %f\n", NRMS_W);
        fprintf("NRMS value based on absolute maximum: %f\n", NRMS_M);
    
        KPI{shiftID}(i,:) = [RMS NRMS_W NRMS_M];
    
    end
    
    f = figure();
    subplot(3,1,1);
    plot(KPI{shiftID}(:,1), 'Marker','x', 'LineWidth', 1.5, 'color', 'b');
    grid on;
    title(strcat('RMS value for', {' '}, num2str(shiftOnOutput), {' '}, 'sfhit on output'));
    
    subplot(3,1,2);
    plot(KPI{shiftID}(:,2), 'Marker','x', 'LineWidth', 1.5, 'color', 'b');
    grid on;
    title(strcat('NRMS_W value for', {' '}, num2str(shiftOnOutput), {' '}, 'sfhit on output'));
    
    subplot(3,1,3);
    plot(KPI{shiftID}(:,2), 'Marker','x', 'LineWidth', 1.5, 'color', 'b');
    grid on;
    title(strcat('NRMS_M value for', {' '}, num2str(shiftOnOutput), {' '}, 'sfhit on output'));
    
    savefig(f, fullfile(temp_folder_path, plots_folder_name,...
                            strcat('KPI_', num2str(shiftID), name(1:end-4), '.fig')));
    saveas(f, fullfile(temp_folder_path, plots_folder_name,...
                    strcat('KPI_', num2str(shiftID), name(1:end-4), '.png')));
    close(f);
    EN

end

function curveTypes = calculateCurveType(segment_m, indexes, name)

global temp_folder_path plots_folder_name
    % return: curveTypes: 0 = unknown, 1=straight, 2=left, 3=right
    thd = 3.5e-4;
    curveTypes = zeros(size(segment_m,1),1);
    curvature = movmean(segment_m(:,indexes.c2)*2, 50);
    straightLine = abs(curvature) < thd;
    straightLine = morphologyOpen(straightLine, 100);
    straightLine = morphologyOpen(straightLine, 50);
    straightLine = morphologyClose(straightLine, 100);
    curveTypes(straightLine) = 1;
    
    leftCurve = curvature>=thd;
    leftCurve = morphologyClose(leftCurve,50);
    rightCurve = curvature<=-thd;
    rightCurve = morphologyClose(rightCurve,50);
    curveTransition = leftCurve&rightCurve;
    curveTypes(leftCurve&~curveTransition) = 2;
    curveTypes(rightCurve&~curveTransition) = 3;
    curveTypes(curveTransition) = 2.5;

    g = figure();

    plot(segment_m(:,indexes.X_abs), segment_m(:, indexes.Y_abs));
    grid on; hold on;
    plot(segment_m(curveTypes==1, indexes.X_abs), segment_m(curveTypes==1, indexes.Y_abs), 'ko');
    legend('original', 'straights');
    savefig(g, fullfile(temp_folder_path, plots_folder_name,...
                strcat('Map', name(1:end-4), '.fig')));
    saveas(g, fullfile(temp_folder_path, plots_folder_name,...
                strcat('Map_', name(1:end-4), '.png')));
    close(g);

end

function dataOut = morphologyOpen(dataIn, windowSize)
% this function is a morphology open filter with window size filter
dataOut = dataIn;
for i=1:length(dataIn)-windowSize
    if (~all(dataIn(i:i+windowSize)))
        dataOut(i:i+windowSize) = 0;
    end
end

end

function dataOut = morphologyClose(dataIn, windowSize)
% this function is a morphology close filter with window size filter
dataOut = dataIn;
for i=1:length(dataIn)-windowSize
    if (any(dataIn(i:i+windowSize)))
        dataOut(i:i+windowSize) = 1;
    end
end

end




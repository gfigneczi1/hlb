% This function is the cover function to call the GP sub-function for a
% given segment_m. segment_ms is an array of struct containing the driving data
% of multiple drivers. Config is a metadata struct containing information
% about e.g., the plot folders
close all; clear;
load('C:\database\KDP_HLB_GP\Dr008_Dr023_input_GP.mat');
config.root = "./";

MAXIMUM_INPUT_SIZE = inf; % before snipetting and normalization
KERNEL_TYPE = "{'covPPard',3}";
RATIO_OF_TRAIN_VS_TOTAL = 0.7;
MAXIMUM_PREVIEW_DISTANCE = 150; % from within preview information is extracted, unit: m
OUTPUT_SHIFT = 15; %linspace(15,MAXIMUM_PREVIEW_DISTANCE,10);
INDUCED_SIZE = 300;
inductionSizePool = [10, 20, 50, 100, 300];

for i=1:length(segments.segments)-2
    % loop through segment_ms and concatenate each to the previous one
    if (i==1)
        segmentMerged=segments.segments(i).segment;
    else
        segmentMerged=[segmentMerged; segments.segments(i).segment];
    end
end
[~, segmentMerged_m, indexesMerged] = prepareInputForPlanner(segmentMerged);

PARAMS.MAXIMUM_INPUT_SIZE = MAXIMUM_INPUT_SIZE;
PARAMS.OUTPUT_SHIFT = OUTPUT_SHIFT;
[~, ~, ~, ~, ~, s_out, ~, s_in] = prepareData(segmentMerged_m, indexesMerged, PARAMS);

temp_folder_path = config.root;
plots_folder_name = 'plots';
set(0,'DefaultFigureVisible','off');

% PARAMETERS
shiftOnOutputSelection = OUTPUT_SHIFT;  %shift the offset in time (positive means shift forward)
p = RATIO_OF_TRAIN_VS_TOTAL; %percentage of evaluation data from entire dataset

for indSize = 4:length(inductionSizePool)
    INDUCED_SIZE = inductionSizePool(indSize);
for driverID = 4:size(segments.segments,2)-2
    segment = segments.segments(driverID).segment;
    name = segments.segments(driverID).name;
    % transforming the struct to array for lower calculation time
    [~, segment_m, indexes] = prepareInputForPlanner(segment);
    dT = mean(diff(segment_m(:, indexes.Relative_time)));

    for shiftID=1:numel(OUTPUT_SHIFT)
        tic;
        dx = segment_m(:, indexes.VelocityX)*dT;
        shiftOnOutput = [1:1:size(segment_m(:,indexes.Relative_time),1)]'+floor(OUTPUT_SHIFT(shiftID)./dx);
        input = [segment_m(:, indexes.OncomingVehicleTimeToPass), ...
                segment_m(:, indexes.OncomingTrafficType), ...
                segment_m(:, indexes.FrontTrafficType), ...
                segment_m(:, indexes.VelocityX), ...
                movmean(segment_m(:, indexes.AccelerationX),20), ...
                movmean(segment_m(:, indexes.YawRate),20), ...
                movmean(segment_m(:, indexes.LaneCurvature), 20), ...
                movmean(segment_m(:, indexes.c3), 200)];
        input = input(:,2:end);
        input(:,1) = movmean(input(:,1),50);
        input(:,2) = movmean(input(:,2),50);
        inputRaw = input; % saved for further analysis

        output = zeros(size(input,1),1);
        delta = segment_m(:, indexes.c0);
        for shiftIDonOutput=1:size(input,1)
            if (shiftOnOutput(shiftIDonOutput) > size(input,1))
                break;
            else
                output(shiftIDonOutput,1) = delta(shiftOnOutput(shiftIDonOutput));
            end
        end   
        outputRaw = output; % saved for further analysis
    
        % SHUFFLE
        N = size(input,1);
        shuffledIndeces = randperm(N);
        input = input(shuffledIndeces,:);
        output = output(shuffledIndeces, :);

        % LIMIT DATA IF NEEDED
        % this is done before norm and central
        input = input(1:min(size(input,1),MAXIMUM_INPUT_SIZE),:);
        output = output(1:min(size(input,1),MAXIMUM_INPUT_SIZE), :);

        % NORM AND CENTRAL
        % According to the global cin and sin, cout and sout
        [~, cout, ~] = normalize(output);
        [~, cin, ~] = normalize(input);
        output = (output-cout)./s_out(shiftID);
        input = (input-cin)./s_in;
        
        % REMOVING SPARE POINTS I.E., OUTPUT HIGHER THAN 2, = 2 sigma
        % variance
        input = input(abs(output(:,1))<=3,:);
        output = output(abs(output(:,1))<=3,:);

        % SIMULATION
        M = size(input,1);
        % EVALUATION / VALIDATION DATA SELECTION
        estimationData = 1:1:round(p*M);
        validationData = round(p*M)+1:1:M;
        input_estimation = input(estimationData,:);
        output_estimation = output(estimationData,1);
        input_validation = input(validationData,:);
        output_validation = output(validationData,:);

        %% Define GP 
        hyp = generateHyperParamStruct(KERNEL_TYPE, size(input,2));
        eval(strcat('covfunc = ',KERNEL_TYPE));    % Squared Exponental covariance function
        meanfunc = [];       % Start with a zero mean prior
        likfunc = @likGauss;    % Gaussian likelihood
        
        xu = input(1:INDUCED_SIZE,:);
        hypInduced = hyp;
        covInduced = {'apxSparse',covfunc,xu};           % inducing points
        inf = @infGaussLik;
        infv  = @(varargin) inf(varargin{:},struct('s',0.0));           % VFE, opt.s = 0
        hypInduced.xu = xu;  % adding induced inputs
        hyp_opt = minimize(hypInduced,@gp,-100, inf,meanfunc,covInduced,likfunc,input,output); 

        input_induced= hyp_opt.xu;
        output_induced = gp(hyp_opt,infv,meanfunc,covInduced,likfunc, input, output, input_induced);  
    
        %hyp_opt = minimize(hyp, @gp, -100, @infGaussLik, meanfunc, covfunc, likfunc, input_induced, output_induced); % Optimize the marginal likelihood
        % checking performance degradation
        [estimationInduced, deviationInduced] = gp(hyp_opt, infv, meanfunc, covInduced, likfunc, input_induced, output_induced, input_estimation);

        %% KPI-s
        % RMS calculation
        RMSinduced = sqrt(sum((estimationInduced-output_estimation).^2)/size(estimationInduced,1));
        % NRMS - normalization on scale
        W = max(output_estimation) - min(output_estimation);
        NRMS_W_induced = RMSinduced/W;
        % NRMS - normalization on absolute maximum
        M = max(abs(output_estimation));
        NRMS_M_induced = RMSinduced/M;
        % mean variance
        RMS_DEV_induced = sqrt(sum(deviationInduced.^2)/size(deviationInduced,1));

        fprintf("Induction accuracy:\n");
        fprintf("RMS value is: %f\n", RMSinduced);
        fprintf("NRMS value based on range: %f\n", NRMS_W_induced);
        fprintf("NRMS value based on absolute maximum: %f\n", NRMS_M_induced);

        % assigning for further analysis
        input_estimation = input_induced;
        output_estimation = output_induced;
        
        % Evaluation of validation data
        [estimation, deviation] = gp(hyp_opt, infv, meanfunc, covInduced, likfunc, input_estimation, output_estimation, input_validation); % extract the mean and covarance functions
        %% KPI-s
        % RMS calculation
        RMS = sqrt(sum((estimation-output_validation).^2)/size(estimation,1));
        % NRMS - normalization on scale
        W = max(output_validation) - min(output_validation);
        NRMS_W = RMS/W;
        % NRMS - normalization on absolute maximum
        M = max(abs(output_validation));
        NRMS_M = RMS/M;
        % mean variance
        RMS_DEV = sqrt(sum(deviation.^2)/size(deviation,1));
        
        fprintf("EVALUTATION of snippet %d:\n", i);
        fprintf("RMS value is: %f\n", RMS);
        fprintf("NRMS value based on range: %f\n", NRMS_W);
        fprintf("NRMS value based on absolute maximum: %f\n", NRMS_M);

        % Evaluation of estimation data
        [estimationEstimation, deviationEstimation] = gp(hyp_opt, infv, meanfunc, covInduced, likfunc, input_estimation, output_estimation, input_estimation); % extract the mean and covarance functions

        %% KPI-s
        % RMS calculation
        RMSest = sqrt(sum((estimationEstimation-output_estimation).^2)/size(estimationEstimation,1));
        % NRMS - normalization on scale
        W = max(output_estimation) - min(output_estimation);
        NRMS_W_est = RMSest/W;
        % NRMS - normalization on absolute maximum
        M = max(abs(output_estimation));
        NRMS_M_est = RMSest/M;
        % mean variance
        RMS_DEV_est = sqrt(sum(deviationEstimation.^2)/size(deviationEstimation,1));
        
        fprintf("EVALUTATION of snippet %d:\n", i);
        fprintf("RMS_est value is: %f\n", RMSest);
        fprintf("NRMS_est value based on range: %f\n", NRMS_W_est);
        fprintf("NRMS_est value based on absolute maximum: %f\n", NRMS_M_est);

        % time series resimulation
        inputTimeSeries = (inputRaw-cin)./s_in;
        outputTimeSeries = (outputRaw-cout)./s_out(shiftID);
        [estimationTimeSeries, deviationTimeSeries] = gp(hyp_opt, infv, meanfunc, covInduced, likfunc, input_estimation, output_estimation, inputTimeSeries); % extract the mean and covarance functions
        offsets{1}.offset = estimationTimeSeries*s_out+cout; offsets{1}.name = 'GPM'; offsets{1}.X = segment_m(:,indexes.X_abs); offsets{1}.marker = 'r';
        offsets{2}.offset = outputRaw; offsets{2}.name = 'REAL'; offsets{2}.X = segment_m(:,indexes.X_abs); offsets{2}.marker = 'k';

        plot_offsetPlots(segment_m,indexes,offsets, driverID);

        f = figure('units','normalized','outerposition',[0 0 1 1]);

        % plot the estimation data
        subplot(2,1,1);
        confidenceBounds = [estimation+2*sqrt(deviation); flip(estimation-2*sqrt(deviation),1)];
        confidencePoints = (1:1:numel(estimation))';
    
        fill([confidencePoints; flip(confidencePoints)], confidenceBounds, 'y', 'DisplayName', '95% confidence');
        hold on;
        plot(estimation,'LineWidth', 2, 'color', 'k', 'LineStyle','--', 'DisplayName', 'estimated by GP');    
        ylabel('offset');
        grid on;
        plot(output_validation, 'LineWidth', 2, 'LineStyle', ':', 'color', 'b', 'DisplayName','validation data');
        legend;
        ylabel('offset(m)');

        % plot the estimation data
        subplot(2,1,2);
        confidenceBounds = [estimationEstimation+2*sqrt(deviationEstimation); flip(estimationEstimation-2*sqrt(deviationEstimation),1)];
        confidencePoints = (1:1:numel(estimationEstimation))';
    
        fill([confidencePoints; flip(confidencePoints)], confidenceBounds, 'y', 'DisplayName', '95% confidence');
        hold on;
        plot(estimationEstimation,'LineWidth', 2, 'color', 'k', 'LineStyle','--', 'DisplayName', 'estimated by GP');    
        ylabel('offset');
        grid on;
        plot(output_estimation, 'LineWidth', 2, 'LineStyle', ':', 'color', 'b', 'DisplayName','estimation data');
        legend;
        ylabel('offset(m)');
        
        savefig(f, fullfile(temp_folder_path, plots_folder_name,...
                            strcat('Snippets_', num2str(i), '_', num2str(shiftID), '_driver', num2str(driverID), '.fig')));
        saveas(f, fullfile(temp_folder_path, plots_folder_name,...
                        strcat('Snippets_', num2str(i), '_', num2str(shiftID), '_driver', num2str(driverID), '.png')));
        close(f);

        trun = toc;
        KPI{shiftID}= [RMS NRMS_W NRMS_M RMS_DEV RMSest NRMS_W_est NRMS_M_est RMS_DEV_est hyp_opt.cov RMSinduced NRMS_W_induced NRMS_M_induced trun];
        ETA(shiftID).hyp_opt = hyp_opt;
        ETA(shiftID).input_estimation = input_estimation;
        ETA(shiftID).output_estimation = output_estimation;
        ETA(shiftID).normFactors = [cin, s_in, cout,s_out];
        
        fprintf("time of shift id %d is %f\n", shiftID, trun);        
    end    
    save( fullfile(temp_folder_path, plots_folder_name,strcat('KPI_indSize_', num2str(indSize), '_driver_', num2str(driverID), '.mat')), 'KPI');
    save( fullfile(temp_folder_path, plots_folder_name,strcat('ETA_indSize_', num2str(indSize), '_driver_', num2str(driverID), '.mat')), 'ETA');
end
end

function [input,c,s] = normAndCentral(input)
    for i=1:size(input,2)
         [input(:,i), c(i), s(i)] = normalize(input(:,i));
    end
end

function [input, output, inputRaw, outputRaw, c_out, s_out, c_in, s_in] = prepareData(segment_m, indexes, PARAMS)
     % input array
     input = [segment_m(:, indexes.OncomingVehicleTimeToPass), ...
                segment_m(:, indexes.OncomingTrafficType), ...
                segment_m(:, indexes.FrontTrafficType), ...
                segment_m(:, indexes.VelocityX), ...
                movmean(segment_m(:, indexes.AccelerationX),20), ...
                movmean(segment_m(:, indexes.YawRate),20), ...
                movmean(segment_m(:, indexes.LaneCurvature), 20), ...
                movmean(segment_m(:, indexes.c3), 200)];

        input = input(:,2:end);
        input(:,1) = movmean(input(:,1),50);
        input(:,2) = movmean(input(:,2),50);
    
    % output array
    output = zeros(size(input,1),numel(PARAMS.OUTPUT_SHIFT));
    delta = -segment_m(:,indexes.c0);
    for shiftID=1:numel(PARAMS.OUTPUT_SHIFT)
        dT = mean(diff(segment_m(:, indexes.Relative_time)));
        dx = segment_m(:, indexes.VelocityX)*dT;        
        shiftOnOutput = [1:1:size(segment_m(:,indexes.Relative_time),1)]'+floor(PARAMS.OUTPUT_SHIFT(shiftID)./dx);
        for shiftIDonOutput=1:size(input,1)
            if (shiftOnOutput(shiftIDonOutput) > size(input,1))
                break;
            else
                output(shiftIDonOutput,shiftID) = delta(shiftOnOutput(shiftIDonOutput));
            end
        end
    end
    
    inputRaw = input;
    outputRaw = output;
    
    % SHUFFLE
    N = size(input,1);
    shuffledIndeces = randperm(N);
    input = input(shuffledIndeces,:);
    output = output(shuffledIndeces, :);

    % LIMIT DATA IF NEEDED
    % this is done before norm and central
    input = input(1:min(size(input,1),PARAMS.MAXIMUM_INPUT_SIZE),:);
    output = output(1:min(size(input,1),PARAMS.MAXIMUM_INPUT_SIZE), :);

    % NORM AND CENTRAL
    [output, c_out, s_out] = normAndCentral(output);
    [input, c_in, s_in] = normAndCentral(input);
end

function hyp = generateHyperParamStruct(KERNEL_TYPE, M)
    % ID problem
    if (KERNEL_TYPE == "@covLINiso")
        hyp = struct('mean', [], 'cov', 0, 'lik', -1); % initalize hyper-parameter structure associated with the mean, covariance an likelihood functions
    elseif (KERNEL_TYPE == "@covRQiso")
        hyp = struct('mean', [], 'cov', [0,0,0], 'lik', -1);
    elseif (KERNEL_TYPE=="{'covPERiso',{@covRQiso}}")
        hyp = struct('mean', [], 'cov', [0,0,0,0], 'lik', -1);
    elseif (KERNEL_TYPE=="{'covPERiso',{@covRQiso}}")
        hyp = struct('mean', [], 'cov', [0,0,0,0], 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covRQiso',{'covPERiso',{@covRQiso}}}}")
        hyp = struct('mean', [], 'cov', [0, 0, 0, 0, 0, 0, 0], 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covRQiso',{'covPERiso',{@covRQiso}}, 'covLINiso'}}")
        hyp = struct('mean', [], 'cov', [0, 0, 0, 0, 0, 0, 0, 0], 'lik', -1);
    elseif (KERNEL_TYPE == "{'covPERard', {@covSEard}}")
        hyp = struct('mean', [], 'cov', ones(1,3*M+1), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covPPard',3}")
        hyp = struct('mean', [], 'cov', ones(1,M+1), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covLINard', 'covSEard', {'covPPard',3}}}") 
        hyp = struct('mean', [], 'cov', ones(1,3*M+2), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covSEiso', 'covLINiso'}}")
        hyp = struct('mean', [], 'cov', [0, 0, 0], 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covSEiso', 'covLINiso', {'covPERiso',{@covRQiso}}}}")
        hyp = struct('mean', [], 'cov', [0, 0, 0, 0, 0, 0, 0], 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covRQiso',{'covPERiso',{@covRQiso}}, {'covProd', {'covLINiso', 'covLINiso'}}}}")
        hyp = struct('mean', [], 'cov', [0, 0, 0, 0, 0, 0, 0, 0, 0], 'lik', -1);
    elseif (KERNEL_TYPE == "@covSEard" || KERNEL_TYPE == "{'covSEard'}")
        hyp = struct('mean', [], 'cov', ones(1,M+1), 'lik', -1);
    elseif (KERNEL_TYPE == "@covLINard")
        hyp = struct('mean', [], 'cov', ones(1,M), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covSEard', 'covLINard'}}")
        hyp = struct('mean', [], 'cov', ones(1,2*M+1), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covProd', {'covLINard', 'covLINard'}}")
        hyp = struct('mean', [], 'cov', ones(1,2*M), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum',{{'covProd', {'covLINard', 'covLINard'}}, 'covSEard'}}")
        hyp = struct('mean', [], 'cov', ones(1,3*M+1), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covLINard', {'covPPard',3}}}")
        hyp = struct('mean', [], 'cov', log(ones(1,2*M+1)), 'lik', -1);
    elseif (KERNEL_TYPE == "{'covSum', {'covSEard', {'covPPard',3}}}")
        hyp = struct('mean', [], 'cov', ones(1,2*M+2), 'lik', -1);
    else
        hyp = struct('mean', [], 'cov', [0, 0], 'lik', -1);
    end
end
